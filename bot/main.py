import os
import logging
import docx
import PyPDF2
from pathlib import Path
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import BotCommand, Message, ContentType
import asyncio
import httpx
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

API_TOKEN = os.getenv('TG_TOKEN')
RESUMES_DIR = "user_resumes"
os.makedirs(RESUMES_DIR, exist_ok=True)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()


def extract_text_from_pdf(file_path: str) -> str:
    with open(file_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        text = "\n".join([page.extract_text() for page in reader.pages])
    return text


def extract_text_from_docx(file_path: str) -> str:
    doc = docx.Document(file_path)
    return "\n".join([para.text for para in doc.paragraphs])


async def process_resume(user_id: str, resume_text: str):
    api_url = "http://127.0.0.1:8080/v1/core/add_resume"
    payload = {
        "user_id": f"{user_id}",
        "text_resume": resume_text
    }

    headers = {
        "Content-Type": "application/json",
        "Accept": "*/*",                      
        "User-Agent": "SkillMatchBot/1.0",                 
        "Host": "127.0.0.1:8080"                           
    }

    try:
        async with httpx.AsyncClient(timeout=100.0) as client:
            response = await client.post(api_url, json=payload, headers=headers)
            response.raise_for_status()
            
            data_size_kb = len(resume_text.encode('utf-8')) / 1024
            return (
                "‚úÖ –í–∞—à–µ —Ä–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n"
                f"–†–∞–∑–º–µ—Ä: {data_size_kb:.1f} –ö–ë\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /find_jobs –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π"
            )
    except httpx.RequestError as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ: {str(e)}"


async def set_commands():
    commands = [
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="/help", description="–ü–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand(command="/resume", description="–î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ"),
        BotCommand(command="/find_jobs", description="–ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")
    ]
    await bot.set_my_commands(commands)


@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ <b>SkillMatch BOT</b>!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /resume —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
    )
    await message.answer(welcome_text, parse_mode='HTML')


@dp.message(Command("help"))
async def send_help(message: types.Message):
    help_text = (
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/resume - –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ\n"
        "/find_jobs - –ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –≤–∞—à–µ–º—É —Ä–µ–∑—é–º–µ\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOCX, TXT –∏–ª–∏ —Ç–µ–∫—Å—Ç"
    )
    await message.answer(help_text, parse_mode='HTML')


from aiogram import types
from aiogram.filters import Command
from aiogram.types import Message
import httpx

@dp.message(Command("find_jobs"))
async def request_jobs(message: Message):
    api_url = "http://127.0.0.1:8080/v1/core/find_job"
    payload = {
        "user_id": f"{message.from_user.id}",
    }

    headers = {
        "Content-Type": "application/json",
        "Accept": "*/*",
        "User-Agent": "SkillMatchBot/1.0",
        "Host": "127.0.0.1:8080"
    }

    try:
        async with httpx.AsyncClient(timeout=100.0) as client:
            response = await client.post(api_url, json=payload, headers=headers)
            response.raise_for_status()

            vacancies = response.json()

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º score –∫ —á–∏—Å–ª—É
            def parse_score(v):
                score_str = str(v.get("Score", "0")).replace("%", "")
                try:
                    return int(score_str)
                except ValueError:
                    return 0

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é score
            vacancies.sort(key=parse_score, reverse=True)

            if not vacancies:
                return await message.answer("‚ùå –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –≤–∞—à–µ–º—É —Ä–µ–∑—é–º–µ.")

            text = "üîé *–í–æ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–º –ø–æ —Ä–µ–∑—é–º–µ:*\n\n"

            for v in vacancies:
                score = str(v.get("Score", "N/A"))
                text += (
                    f"üìå *{v['name']}*\n"
                    f"üîó [–û—Ç–∫—Ä—ã—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é]({v['link']})\n"
                    f"üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: *{score}%*\n\n"
                )

            await message.answer(text, parse_mode="Markdown")

    except httpx.RequestError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π: {str(e)}")




@dp.message(Command("resume"))
async def request_resume(message: Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ:\n"
        "- –ö–∞–∫ —Ñ–∞–π–ª (PDF, DOCX –∏–ª–∏ TXT)\n"
        "- –ò–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"
    )


@dp.message(F.content_type.in_({ContentType.DOCUMENT, ContentType.TEXT}))
async def handle_resume(message: Message):
    user_id = message.from_user.id
    text = ""

    if message.content_type == ContentType.TEXT:
        text = message.text
        await message.answer("–†–µ–∑—é–º–µ –ø–æ–ª—É—á–µ–Ω–æ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

    elif message.content_type == ContentType.DOCUMENT:
        file = await bot.get_file(message.document.file_id)
        file_ext = Path(message.document.file_name).suffix.lower()

        if file_ext not in ('.pdf', '.docx', '.txt'):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, DOCX –∏–ª–∏ TXT")
            return

        file_path = Path(RESUMES_DIR) / f"temp_{user_id}{file_ext}"
        await bot.download_file(file.file_path, destination=file_path)

        await message.answer(f"–§–∞–π–ª {message.document.file_name} –ø–æ–ª—É—á–µ–Ω. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

        try:
            if file_ext == '.pdf':
                text = extract_text_from_pdf(file_path)
            elif file_ext == '.docx':
                text = extract_text_from_docx(file_path)
            elif file_ext == '.txt':
                with open(file_path, 'r', encoding='utf-8') as f:
                    text = f.read()

            os.remove(file_path)

        except Exception as e:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç.")
            logger.error(f"Error processing file: {e}")
            return

    if text:
        resp = await process_resume(user_id, text)
        await message.answer(resp)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—é–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç.")


async def main():
    await set_commands()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())